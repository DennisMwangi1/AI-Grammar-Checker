import React, { useState } from "react";
import ContentEditable from "react-contenteditable";

const RichTextEditor = ({ content: initialContent, data: initialData }: any) => {
    const [content, setContent] = useState(initialContent);  // Store the content
    const [errorData, setErrorData] = useState(initialData);
    console.log(errorData)
    const handleSuggestionClick = (suggestion: string, errorIndex: number) => {
        const updatedContent = replaceErrorWithSuggestion(content, suggestion, errorIndex);
        console.log("Suggestion clicked:", suggestion, errorIndex);
        console.log("Updated content:", updatedContent);
        setContent(updatedContent);
    }
    
    const replaceErrorWithSuggestion = (content: string, suggestion: string, errorIndex: number) => {
        const error = errorData[errorIndex];
        console.log('error',error);
        const errorText = error.sentence.substring(error.start, error.end);
        console.log('errorText',errorText);
        const updatedContent = content.replace(errorText, suggestion);
        console.log("Updated content:", updatedContent);
        return updatedContent;
    }
    const renderWithErrors = () => {
        let highlightedContent = content;

        // Loop through the error data and highlight errors
        errorData.forEach((error: any, index: number) => {
            const errorText = error.sentence.substring(error.start, error.end);
            const tooltip = `
        <div class="absolute top-full mt-1 left-1/2 transform -translate-x-1/2 text-xs bg-gray-800 text-white rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity">
          ${error.suggestions.map((suggestion: string, suggestionIndex: number) => (
              `<button data-error-index=${index} typr="button" onclick="handleSuggestionClick('${suggestion}', ${suggestionIndex})">
               ${suggestion}
            </button>`
            )).join(', ')}
        </div>
      `;

            // Replace error text with a span that has red underline and the tooltip
            highlightedContent = highlightedContent.replace(
                errorText,
                `
          <span class="relative cursor-pointer underline text-red-600 group" 
                style="text-decoration-color: red; text-decoration-thickness: 2px;">
            ${errorText}
            ${tooltip}
          </span>`
            );
        });

        return highlightedContent;
    };

    const onClickContentEditable = (e) => {
        const clickedElement = e.target;
console.log('clickedElement', clickedElement);
        // Check if the clicked element is a suggestion button
        if (clickedElement.tagName === "BUTTON" && clickedElement.hasAttribute("data-error-index")) {
            console.log('here')
            const errorIndex = clickedElement.getAttribute("data-error-index");
            const suggestion = clickedElement.innerText;
            handleSuggestionClick(suggestion, errorIndex);
        }
    };
    return (
        <div className="relative">
            <ContentEditable
                html={renderWithErrors()}
                onChange={()=>{}}
                disabled={false}
                tagName="div"
                className="border p-4 min-h-[200px] bg-white"
                dangerouslySetInnerHTML={{ __html: renderWithErrors() }}
                innerRef={(ref) => ref?.addEventListener("click", onClickContentEditable)}
            />
        </div>
    );
};

export default RichTextEditor;
















import React, { useState } from "react";
import ContentEditable from "react-contenteditable";

type RichTextEditorProps = {
    content: string;
    data: {
        sentence: string;
        position: {
            start: number;
            end: number;
        };
        error: string;
        suggestions: string[];
    }[];
}
const RichTextEditor = ({ content: initialContent, data: errorData }: RichTextEditorProps) => {
    console.log(errorData);
    const [content, setContent] = useState(initialContent); // Store the content
    const escapeRegExp = (string: string) => string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

    const handleSuggestionClick = (suggestion: string, errorIndex: number) => {
        const updatedContent = replaceErrorWithSuggestion(
            content,
            suggestion,
            errorIndex
        );
        setContent(updatedContent);
    };

    const replaceErrorWithSuggestion = (
        content: string,
        suggestion: string,
        errorIndex: number
    ) => {
        const error = errorData[errorIndex];
        console.log(suggestion)
        const errorText = content.substring(error.position.start, error.position.end);
        const safeErrorText = escapeRegExp(errorText);
        const regex = new RegExp(
            safeErrorText
        );
        console.log(regex);

        const updatedContent = content.replace(regex, `<span class="underline text-blue-600">${suggestion}</span>`);
        console.log(updatedContent)
        return updatedContent;
    
    };



    const renderWithErrors = () => {
        let highlightedContent = content;

        // Loop through the error data and highlight errors
        errorData.forEach((error: any, index: number) => {
            const errorText = content.substring(error.position.start, error.position.end);
            const safeErrorText = escapeRegExp(errorText);
            const tooltip = (
                `<div class="absolute top-full mt-1 left-1/2 transform -translate-x-1/2 
                        text-xs bg-gray-800 text-white rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity">
                    ${error.suggestions.map(
                    (suggestion: string) =>
                        `<button 
                                type="button" 
                                data-error-index="${index}" 
                                class="mr-2 hover:text-yellow-500"
                            >
                                ${suggestion}
                            </button>`
                ).join("")}
                </div>`
            );
            

            // Replace error text with a span that has red underline and the tooltip
            highlightedContent = highlightedContent.replace(
                new RegExp(safeErrorText, "g"),
                `
                <span class="relative cursor-pointer underline text-red-600 group"
                      style="text-decoration-color: red; text-decoration-thickness: 2px;">
                    ${errorText}
                    ${tooltip}
                </span>`
            );
        });


        return highlightedContent;
    };

    const onClickContentEditable = (e: any) => {
        const clickedElement = e.target;

        if (
            clickedElement.tagName === "BUTTON" &&
            clickedElement.hasAttribute("data-error-index")
        ) {
            const errorIndex = parseInt(
                clickedElement.getAttribute("data-error-index")
            );
            const suggestion = clickedElement.innerText;
            handleSuggestionClick(suggestion, errorIndex);
        }
    };
    return (
        <div className="relative">
            <ContentEditable
                html={renderWithErrors()}
                onChange={() => { }}
                onClick={onClickContentEditable}
                disabled={false}
                tagName="div"
                className="border p-4 min-h-[200px] bg-white"
                dangerouslySetInnerHTML={{ __html: renderWithErrors() }}
                // innerRef={(ref: any) =>
                //     ref?.addEventListener("click", onClickContentEditable)
                // }
            />
        </div>
    );
};

export default RichTextEditor;

